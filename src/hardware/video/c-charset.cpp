/* -*- Mode: C; indent-tabs-mode: t; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * Vinace
 * Copyright (C) P.Y. Rollo 2009 <dev@pyrollo.com>
 *
 * Vinace is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Vinace is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Codes taken from :
 *
 * Appleblossom - Portable Open-Source Apple IIe Emulator
 * Copyright (C) 2005 Jonathan Bettencourt (jonrelay)
 *
 * Released under GNU General Public License
 */

#include "c-charset.hpp"
#include <QDebug>
// Each line of 8 bytes contains a 8x8 char (actually, only a 7x8 is displayed by the Apple II)

// Standard symbol and numbers
uint8_t charset_symnum[256] =
   {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x08, 0x00,
    0x14, 0x14, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x14, 0x14, 0x3E, 0x14, 0x3E, 0x14, 0x14, 0x00,
    0x08, 0x1E, 0x28, 0x1C, 0x0A, 0x3C, 0x08, 0x00,
    0x30, 0x32, 0x04, 0x08, 0x10, 0x26, 0x06, 0x00,
    0x10, 0x28, 0x28, 0x10, 0x2A, 0x24, 0x1A, 0x00,
    0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x10, 0x20, 0x20, 0x20, 0x10, 0x08, 0x00,
    0x08, 0x04, 0x02, 0x02, 0x02, 0x04, 0x08, 0x00,
    0x08, 0x2A, 0x1C, 0x08, 0x1C, 0x2A, 0x08, 0x00,
    0x00, 0x08, 0x08, 0x3E, 0x08, 0x08, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x10, 0x00,
    0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
    0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x00,
    0x1C, 0x22, 0x26, 0x2A, 0x32, 0x22, 0x1C, 0x00,
    0x08, 0x18, 0x08, 0x08, 0x08, 0x08, 0x1C, 0x00,
    0x1C, 0x22, 0x02, 0x0C, 0x10, 0x20, 0x3E, 0x00,
    0x3E, 0x02, 0x04, 0x0C, 0x02, 0x22, 0x1C, 0x00,
    0x04, 0x0C, 0x14, 0x24, 0x3E, 0x04, 0x04, 0x00,
    0x3E, 0x20, 0x3C, 0x02, 0x02, 0x22, 0x1C, 0x00,
    0x0E, 0x10, 0x20, 0x3C, 0x22, 0x22, 0x1C, 0x00,
    0x3E, 0x02, 0x04, 0x08, 0x10, 0x10, 0x10, 0x00,
    0x1C, 0x22, 0x22, 0x1C, 0x22, 0x22, 0x1C, 0x00,
    0x1C, 0x22, 0x22, 0x1E, 0x02, 0x04, 0x38, 0x00,
    0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x08, 0x00, 0x08, 0x08, 0x10, 0x00,
    0x04, 0x08, 0x10, 0x20, 0x10, 0x08, 0x04, 0x00,
    0x00, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x00, 0x00,
    0x10, 0x08, 0x04, 0x02, 0x04, 0x08, 0x10, 0x00,
    0x1C, 0x22, 0x04, 0x08, 0x08, 0x00, 0x08, 0x00};

// Standard uppercase letters
uint8_t charset_upper[256] =
   {0x1C, 0x22, 0x2A, 0x2E, 0x2C, 0x20, 0x1E, 0x00,
    0x08, 0x14, 0x22, 0x22, 0x3E, 0x22, 0x22, 0x00,
    0x3C, 0x22, 0x22, 0x3C, 0x22, 0x22, 0x3C, 0x00,
    0x1C, 0x22, 0x20, 0x20, 0x20, 0x22, 0x1C, 0x00,
    0x3C, 0x22, 0x22, 0x22, 0x22, 0x22, 0x3C, 0x00,
    0x3E, 0x20, 0x20, 0x3C, 0x20, 0x20, 0x3E, 0x00,
    0x3E, 0x20, 0x20, 0x3C, 0x20, 0x20, 0x20, 0x00,
    0x1E, 0x20, 0x20, 0x20, 0x26, 0x22, 0x1E, 0x00,
    0x22, 0x22, 0x22, 0x3E, 0x22, 0x22, 0x22, 0x00,
    0x1C, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1C, 0x00,
    0x02, 0x02, 0x02, 0x02, 0x02, 0x22, 0x1C, 0x00,
    0x22, 0x24, 0x28, 0x30, 0x28, 0x24, 0x22, 0x00,
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3E, 0x00,
    0x22, 0x36, 0x2A, 0x2A, 0x22, 0x22, 0x22, 0x00,
    0x22, 0x22, 0x32, 0x2A, 0x26, 0x22, 0x22, 0x00,
    0x1C, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1C, 0x00,
    0x3C, 0x22, 0x22, 0x3C, 0x20, 0x20, 0x20, 0x00,
    0x1C, 0x22, 0x22, 0x22, 0x2A, 0x24, 0x1A, 0x00,
    0x3C, 0x22, 0x22, 0x3C, 0x28, 0x24, 0x22, 0x00,
    0x1C, 0x22, 0x20, 0x1C, 0x02, 0x22, 0x1C, 0x00,
    0x3E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00,
    0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1C, 0x00,
    0x22, 0x22, 0x22, 0x22, 0x22, 0x14, 0x08, 0x00,
    0x22, 0x22, 0x22, 0x2A, 0x2A, 0x36, 0x22, 0x00,
    0x22, 0x22, 0x14, 0x08, 0x14, 0x22, 0x22, 0x00,
    0x22, 0x22, 0x14, 0x08, 0x08, 0x08, 0x08, 0x00,
    0x3E, 0x02, 0x04, 0x08, 0x10, 0x20, 0x3E, 0x00,
    0x3E, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3E, 0x00,
    0x00, 0x20, 0x10, 0x08, 0x04, 0x02, 0x00, 0x00,
    0x3E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x3E, 0x00,
    0x00, 0x00, 0x08, 0x14, 0x22, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F};

// Apple //e and later lowercase letters
uint8_t charset_lower[256] =
   {0x10, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x1C, 0x02, 0x1E, 0x22, 0x1E, 0x00,
    0x20, 0x20, 0x3C, 0x22, 0x22, 0x22, 0x3C, 0x00,
    0x00, 0x00, 0x1E, 0x20, 0x20, 0x20, 0x1E, 0x00,
    0x02, 0x02, 0x1E, 0x22, 0x22, 0x22, 0x1E, 0x00,
    0x00, 0x00, 0x1C, 0x22, 0x3E, 0x20, 0x1E, 0x00,
    0x0C, 0x12, 0x10, 0x3C, 0x10, 0x10, 0x10, 0x00,
    0x00, 0x00, 0x1C, 0x22, 0x22, 0x1E, 0x02, 0x1C,
    0x20, 0x20, 0x3C, 0x22, 0x22, 0x22, 0x22, 0x00,
    0x08, 0x00, 0x18, 0x08, 0x08, 0x08, 0x1C, 0x00,
    0x04, 0x00, 0x0C, 0x04, 0x04, 0x04, 0x24, 0x18,
    0x20, 0x20, 0x22, 0x24, 0x38, 0x24, 0x22, 0x00,
    0x18, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1C, 0x00,
    0x00, 0x00, 0x36, 0x2A, 0x2A, 0x2A, 0x22, 0x00,
    0x00, 0x00, 0x3C, 0x22, 0x22, 0x22, 0x22, 0x00,
    0x00, 0x00, 0x1C, 0x22, 0x22, 0x22, 0x1C, 0x00,
    0x00, 0x00, 0x3C, 0x22, 0x22, 0x3C, 0x20, 0x20,
    0x00, 0x00, 0x1E, 0x22, 0x22, 0x1E, 0x02, 0x02,
    0x00, 0x00, 0x2E, 0x30, 0x20, 0x20, 0x20, 0x00,
    0x00, 0x00, 0x1E, 0x20, 0x1C, 0x02, 0x3C, 0x00,
    0x10, 0x10, 0x3C, 0x10, 0x10, 0x12, 0x0C, 0x00,
    0x00, 0x00, 0x22, 0x22, 0x22, 0x26, 0x1A, 0x00,
    0x00, 0x00, 0x22, 0x22, 0x22, 0x14, 0x08, 0x00,
    0x00, 0x00, 0x22, 0x22, 0x2A, 0x2A, 0x36, 0x00,
    0x00, 0x00, 0x22, 0x14, 0x08, 0x14, 0x22, 0x00,
    0x00, 0x00, 0x22, 0x22, 0x22, 0x1E, 0x02, 0x1C,
    0x00, 0x00, 0x3E, 0x04, 0x08, 0x10, 0x3E, 0x00,
    0x0E, 0x18, 0x18, 0x30, 0x18, 0x18, 0x0E, 0x00,
    0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
    0x38, 0x0C, 0x0C, 0x06, 0x0C, 0x0C, 0x38, 0x00,
    0x1A, 0x2C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x2A, 0x14, 0x2A, 0x14, 0x2A, 0x00, 0x00};

// Apple //c and later alt charset (kind of icons)
uint8_t charset_alt[256] =
   {0x04, 0x08, 0x36, 0x7F, 0x7E, 0x7E, 0x3F, 0x36,
    0x04, 0x08, 0x36, 0x41, 0x42, 0x42, 0x29, 0x36,
    0x00, 0x00, 0x20, 0x30, 0x38, 0x3C, 0x36, 0x21,
    0x7F, 0x22, 0x14, 0x08, 0x08, 0x14, 0x2A, 0x7F,
    0x00, 0x01, 0x02, 0x44, 0x28, 0x10, 0x10, 0x00,
    0x7F, 0x7E, 0x7D, 0x1B, 0x57, 0x6F, 0x6F, 0x7F,
    0x07, 0x03, 0x3F, 0x46, 0x4F, 0x06, 0x7E, 0x20,
    0x00, 0x0C, 0x70, 0x00, 0x70, 0x18, 0x08, 0x07,
    0x08, 0x10, 0x20, 0x7F, 0x20, 0x10, 0x08, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A,
    0x08, 0x08, 0x08, 0x08, 0x49, 0x2A, 0x1C, 0x08,
    0x08, 0x1C, 0x2A, 0x49, 0x08, 0x08, 0x08, 0x08,
    0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x01, 0x01, 0x11, 0x31, 0x7F, 0x30, 0x10,
    0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E,
    0x64, 0x0C, 0x1C, 0x3F, 0x1C, 0x0C, 0x04, 0x7B,
    0x13, 0x18, 0x1C, 0x7E, 0x1C, 0x18, 0x10, 0x6F,
    0x01, 0x09, 0x08, 0x7F, 0x3E, 0x1C, 0x09, 0x01,
    0x01, 0x09, 0x1C, 0x3E, 0x7F, 0x08, 0x09, 0x01,
    0x00, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x7F,
    0x08, 0x04, 0x02, 0x7F, 0x02, 0x04, 0x08, 0x00,
    0x2A, 0x55, 0x2A, 0x55, 0x2A, 0x55, 0x2A, 0x55,
    0x55, 0x2A, 0x55, 0x2A, 0x55, 0x2A, 0x55, 0x2A,
    0x00, 0x3E, 0x41, 0x40, 0x40, 0x40, 0x7F, 0x00,
    0x00, 0x00, 0x7E, 0x01, 0x01, 0x01, 0x7F, 0x00,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x08, 0x1C, 0x3E, 0x7F, 0x3E, 0x1C, 0x08, 0x00,
    0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F,
    0x14, 0x14, 0x77, 0x00, 0x77, 0x14, 0x14, 0x00,
    0x7F, 0x01, 0x01, 0x19, 0x19, 0x01, 0x01, 0x7F,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40};

uint8_t* C2ePrimaryCharset::get_char(uint8_t code) {
    uint8_t *charset;
    switch(code >> 5) {
        case 0: charset = charset_upper; break;
        case 1: charset = charset_symnum; break;
        case 2: charset = charset_upper; break;
        case 3: charset = charset_symnum; break;
        case 4: charset = charset_upper; break;
        case 5: charset = charset_symnum; break;
        case 6: charset = charset_upper; break;
        case 7: charset = charset_lower; break;
    }
    return charset+((code & 0x1F)<<3);
}
char_mode C2ePrimaryCharset::get_mode(uint8_t code) {
    switch(code >> 6) {
        case 0: return mode_inverse; break;
        case 1: return mode_flash; break;
        case 2: return mode_normal; break;
        case 3: return mode_normal; break;
    }
    qWarning("C2ePrimaryCharset::get_mode unknown mode %d.  Returning mode_normal.",code);
    return mode_normal;

}

uint8_t* C2eAlternativeCharset::get_char(uint8_t code) {
    uint8_t* charset;
    switch(code >> 5) {
        case 0: charset = charset_upper; break;
        case 1: charset = charset_symnum; break;
        case 2: charset = charset_upper; break;
        case 3: charset = charset_lower; break;
        case 4: charset = charset_upper; break;
        case 5: charset = charset_symnum; break;
        case 6: charset = charset_upper; break;
        case 7: charset = charset_lower; break;
    }
    return charset+((code & 0x1F)<<3);
}

char_mode C2eAlternativeCharset::get_mode(uint8_t code) {
    switch(code >> 6) {
        case 0: return mode_inverse; break;
        case 1: return mode_inverse; break;
        case 2: return mode_normal; break;
        case 3: return mode_normal; break;
    }

    qWarning("C2eAlternativeCharset::get_mode unknown mode %d.  Returning mode_normal.",code);
    return mode_normal;
}
